# -*- coding: utf-8 -*-
"""tugaskecerdasanbuatan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjyJzCRDgIlvWHZ1I7c2MrmhmVkrqpyz
"""

import random

def fitness_function(chromosome):
    a, b, c, d = chromosome
    target_value = 30

    # Menghitung nilai fungsi objektif (error) dari persamaan
    objective_value = abs(a + 4*b + 2*c + 3*d - target_value)

    return 1 / (1 + objective_value)  # Fungsi fitness

def generate_initial_population(population_size):
    population = []

    for _ in range(population_size):
        a = random.randint(0, 30)
        b = random.randint(0, 10)
        c = random.randint(0, 10)
        d = random.randint(0, 10)
        chromosome = [a, b, c, d]
        population.append(chromosome)

    return population

def select_parent(population):
    total_fitness = sum(fitness_function(chromosome) for chromosome in population)
    probabilities = [fitness_function(chromosome) / total_fitness for chromosome in population]
    cumulative_probabilities = [sum(probabilities[:i+1]) for i in range(len(probabilities))]

    # Menghasilkan bilangan acak R antara 0-1
    random_number = random.uniform(0, 1)

    # Memilih chromosome berdasarkan R dengan syarat C[k-1] < R < C[k]
    for i, cumulative_prob in enumerate(cumulative_probabilities):
        if cumulative_prob > random_number:
            return population[i]

def find_solution():
    population_size = 100
    generations = 50

    population = generate_initial_population(population_size)

    for _ in range(generations):
        parent = select_parent(population)
        a, b, c, d = parent

        # Mutasi pada variabel a
        if random.random() < 0.1:
            a = random.randint(0, 30)

        # Mutasi pada variabel b, c, dan d
        for i in range(1, 4):
            if random.random() < 0.1:
                parent[i] = random.randint(0, 10)

        population.append(parent)

    best_chromosome = max(population, key=fitness_function)
    return best_chromosome

# Memanggil fungsi dan mencetak solusi
solution = find_solution()

a, b, c, d = solution
print("Nilai a =", a)
print("Nilai b =", b)
print("Nilai c =", c)
print("Nilai d =", d)